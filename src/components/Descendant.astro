---
import type { WithDistance } from "../interfaces/ebi-eki";
import type { KanjiDic2 } from "../interfaces/kanjidic";
import { findDescendants } from "../utils/findDescendants";
import { MemoryThumbnail } from "./MemoryThumbnail";

interface Props {
  kanji: string;
  kanjiToRadicals: Record<string, string[]>;
  radicalToKanjis: Record<string, string[]>;
  ee: WithDistance[];
  kanjiToEbieki: Record<string, WithDistance | undefined>;
  kanjidic: KanjiDic2;
}
const { kanji, kanjiToRadicals, radicalToKanjis, ee, kanjiToEbieki, kanjidic } =
  Astro.props;

const descendants = (kanjiToRadicals[kanji] ?? []).filter((x) => x !== kanji);

const { card, glossStr } = kanjiToEbieki[kanji] ?? {};
const relatives = ee.filter(
  (x) => x.card.kanji !== kanji && x.card.kanji.includes(kanji)
);

const character = kanjidic.kanjidic2[kanji];

const ancestors = findDescendants(radicalToKanjis, kanji).map(
  (char) => kanjiToEbieki[char] ?? char
);
---

<li>
  {
    card ? (
      <>
        <MemoryThumbnail kanji={card.kanji} kana={card.kanas[0]} client:load />
      </>
    ) : (
      <a href={`/character/${kanji}`}>{kanji}</a>
    )
  }{" "}
  {glossStr}{" "}
  {character?.readings.join("・")}{" "}
  {character?.meanings.join(" / ")}{" "}
  {
    relatives.map((x, idx, arr) => (
      <>
        <MemoryThumbnail
          kanji={x.card.kanji}
          kana={x.card.kanas[0]}
          client:load
        />
        {idx < arr.length - 1 ? " ・ " : ""}
      </>
    ))
  }
  {
    ancestors.length > 0 && (
      <>
        (
        {ancestors.map((other, idx, arr) => (
          <>
            {typeof other === "string" ? (
              <a href={`/character/${other}`}>{other}</a>
            ) : (
              <MemoryThumbnail
                kanji={other.card.kanji}
                kana={other.card.kanas[0]}
                client:load
              />
            )}
            {idx < arr.length - 1 ? ", " : ""}
          </>
        ))}
        )
      </>
    )
  }
  <ol>
    {
      descendants.map((d) => (
        <Astro.self
          kanjidic={kanjidic}
          ee={ee}
          kanjiToEbieki={kanjiToEbieki}
          radicalToKanjis={radicalToKanjis}
          kanjiToRadicals={kanjiToRadicals}
          kanji={d}
        />
      ))
    }
  </ol>
</li>

---
import "../../styles/global.css";

import { readFileSync } from "node:fs";
import type { WithDistance } from "../../interfaces/ebi-eki";
import Descendant from "../../components/Descendant.astro";
import type { DependencyGraph } from "../../interfaces/kanjiDepGraph";

import { User } from "../../components/User";
import type { KanjiDic2 } from "../../interfaces/kanjidic";
import { MemoryBar } from "../../components/MemoryBar";

export async function getStaticPaths() {
  const ebieki: WithDistance[] = JSON.parse(
    readFileSync("data/table.json", "utf8")
  );
  return ebieki.map((x) => ({ params: { vocab: x.card.kanji } }));
}

const { vocab: kanji } = Astro.params;
const ee: WithDistance[] = JSON.parse(readFileSync("data/table.json", "utf8"));
const { card, glossStr } = ee.find((x) => x.card.kanji === kanji)!;

const fullGraph: DependencyGraph = JSON.parse(
  readFileSync("data/wanikani-kanji-graph.json", "utf8")
);
const { kanjiToRadicals, radicalToKanjis } = fullGraph;
const kanjiBreakdownsAvailable = kanji
  .split("")
  .filter((x) => x in kanjiToRadicals);
const kanjiToEbieki: Record<string, WithDistance | undefined> =
  Object.fromEntries(ee.map((x) => [x.card.kanji, x]));
const kanjidic: KanjiDic2 = JSON.parse(
  readFileSync("data/kanjidic.json", "utf8")
);
---

<meta charset="utf-8" />
<title>{kanji}</title>

<User client:idle />
<MemoryBar vocabKanji={kanji} client:idle />

<h1>ยง{card.level}.{card.lesson_position} {card.kanji}</h1>
<h2>{card.kanas.join(" ")}</h2>
<p>{glossStr}</p>

<ul>
  {
    kanjiBreakdownsAvailable.map((k) => (
      <Descendant
        kanjidic={kanjidic}
        ee={ee}
        kanjiToEbieki={kanjiToEbieki}
        radicalToKanjis={radicalToKanjis}
        kanjiToRadicals={kanjiToRadicals}
        kanji={k}
      />
    ))
  }
</ul>

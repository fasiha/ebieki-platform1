---
// this should really be prerendered but when I'm adding vocab, that's annowing
export const prerender = false; // this needs to be live

import "../../styles/global.css";

import { readFileSync } from "node:fs";
import { dependencies, type WithDistance } from "../../ebieki";

import Descendant from "../../components/Descendant.astro";

import { User } from "../../components/User";
import type { KanjiDic2 } from "../../interfaces/kanjidic";
import { MemoryBar } from "../../components/MemoryBar";
import { Notes } from "../../components/Notes";
import { getVocab } from "../../dictionary/getVocab";

const ee = await getVocab();
// we're prerendering this for now
// export async function getStaticPaths() {
//   const ee = await getVocab();
//   return ee.map((x) => ({ params: { vocab: x.card.kanji } }));
// }

const { vocab: kanji = "unknown" } = Astro.params;
const { card, glossStr, glossObj } = ee.find((x) => x.card.kanji === kanji)!;
const defs =
  "id" in glossObj
    ? glossObj.sense.map((sense) => sense.gloss.map((g) => g.text).join("; "))
    : [glossStr];

const { kanjiToRadicals, radicalToKanjis } = dependencies;
const kanjiBreakdownsAvailable = kanji
  .split("")
  .filter((x) => x in kanjiToRadicals);
const kanjiToEbieki: Record<string, WithDistance | undefined> =
  Object.fromEntries(ee.map((x) => [x.card.kanji, x]));
const kanjidic: KanjiDic2 = JSON.parse(
  readFileSync("data/kanjidic.json", "utf8")
);
---

<meta charset="utf-8" />
<title>{kanji}</title>

<User client:idle />
<MemoryBar vocabKanji={kanji} client:idle />

<h1>ยง{card.level}.{card.lesson_position} {card.kanji}</h1>
<h2>{card.kanas.join(" ")}</h2>
<ol>
  {defs.map((def) => <li>{def}</li>)}
</ol>

<Notes vocabKanji={kanji} client:only />

<ol>
  {
    kanjiBreakdownsAvailable.map((k) => (
      <Descendant
        kanjidic={kanjidic}
        ee={ee}
        kanjiToEbieki={kanjiToEbieki}
        radicalToKanjis={radicalToKanjis}
        kanjiToRadicals={kanjiToRadicals}
        kanji={k}
      />
    ))
  }
</ol>
